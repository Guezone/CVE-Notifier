import tweepy, base64, os, smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
sender, receiver, password, smtpsrv, port, tls, consumer_key, consumer_secret, access_token_key, access_token_secret, keywords = '','','','','','','','','','',''

def checkConfig(sender, receiver, password, smtpsrv, port, tls,consumer_key, consumer_secret, access_token_key, access_token_secret, keywords):	
	script_path = os.path.abspath(__file__)
	dir_path = script_path.replace("cve-notifier.py","")
	config = open(dir_path+"config.txt","r")
	for line in config.readlines():
		if "sender(=)" in line:
			sender_conf = line.split("(=)")
			sender = sender_conf[1].replace("\n","")
		elif "password(=)" in line:
			passwd_conf = line.split("(=)")
			b64passwd = passwd_conf[1].replace("\n","")
			b = b64passwd.encode("UTF-8")
			bytes_password = base64.b64decode(b)
			password = bytes_password.decode("UTF-8")
		elif "smtpsrv(=)" in line:
			smtpsrv_conf = line.split("(=)")
			smtpsrv = smtpsrv_conf[1].replace("\n","")
		elif "port(=)" in line:
			port_conf = line.split("(=)")
			port = int(port_conf[1].replace("\n",""))
		elif "receiver(=)" in line:
			receiver_conf = line.split("(=)")
			receiver = receiver_conf[1].replace("\n","")
			receivers = receiver.split(";")
		elif "tls(=)" in line:
			tls_conf = line.split("(=)")
			tls = tls_conf[1].replace("\n","")
		elif "cons_key(=)" in line:
			cons_key_conf = line.split("(=)")
			b64cons_key= cons_key_conf[1].replace("\n","")
			b = b64cons_key.encode("UTF-8")
			bytes_cons_key = base64.b64decode(b)
			consumer_key = bytes_cons_key.decode("UTF-8")
		elif "cons_secret(=)" in line:
			cons_secret_conf = line.split("(=)")
			b64cons_secret= cons_secret_conf[1].replace("\n","")
			b = b64cons_secret.encode("UTF-8")
			bytes_cons_secret = base64.b64decode(b)
			consumer_secret = bytes_cons_secret.decode("UTF-8")
		elif "access_key(=)" in line:
			access_key_conf = line.split("(=)")
			b64access_key = access_key_conf[1].replace("\n","")
			b = b64access_key.encode("UTF-8")
			bytes_access_key = base64.b64decode(b)
			access_token_key = bytes_access_key.decode("UTF-8")
		elif "access_secret(=)" in line:
			access_secret_conf = line.split("(=)")
			b64access_secret = access_secret_conf[1].replace("\n","")
			b = b64access_secret.encode("UTF-8")
			bytes_access_secret = base64.b64decode(b)
			access_token_secret = bytes_access_secret.decode("UTF-8")
		elif "keywords(=)" in line:
			keywords_conf = line.split("(=)")
			keywords = keywords_conf[1].replace("\n","")
			keywords = keywords.split(";")
		else:
			print("Nothing in config file.")
			exit()
	if all(value != '' for value in [sender, receivers, password, smtpsrv, str(port), tls, consumer_key, consumer_secret, access_token_key, access_token_secret]):
		print("Configuration is good.")
		tweetPoller(sender, receivers, password, smtpsrv, port, tls, consumer_key, consumer_secret, access_token_key, access_token_secret, keywords)
	else:
		print("Error in the config file.")

def tweetPoller(sender, receivers, password, smtpsrv, port, tls, consumer_key, consumer_secret, access_token_key, access_token_secret, keywords):
	summary, url = "",""
	script_path = os.path.abspath(__file__)
	dir_path = script_path.replace("cve-notifier.py","")
	tweets_data = open(dir_path+"tweets_data","r")
	current_tweet_id = []
	old_tweets_id = []
	new_tweet_id = []
	auth = tweepy.OAuthHandler(consumer_key,consumer_secret)
	auth.set_access_token(access_token_key,access_token_secret)
	api = tweepy.API(auth)
	cve_tweets = api.user_timeline(screen_name="cvenew", tweet_mode="extended", count=200)
	for tweets in cve_tweets:
		current_tweet_id.append(str(tweets.id))

	for ids in tweets_data.readlines():
		if ids != "" or ids != "\n":
			old_tweets_id.append(ids.replace('\n',''))
	for identifier in current_tweet_id:
		if identifier not in old_tweets_id:
			for tweets in cve_tweets:
				if identifier in str(tweets):
					text = tweets.full_text
					parsed_tweet = text.split("https")
					url = 'https'+parsed_tweet[1]
					summary = text.replace(url,"")
			if not keywords:
				sendMail(sender, password, smtpsrv, port, tls, receivers,"New CVE by @CVENEW", url, summary)
				new_tweet_id.append(identifier)
			else:
				for key in keywords:
					if key in summary:
						sendMail(sender, password, smtpsrv, port, tls, receivers,"New CVE by @CVENEW", url, summary)
						new_tweet_id.append(identifier)	
	
	if not new_tweet_id:
		print("No new CVE. Goodbye")	
	else:
		print("Updating buffer file...")
		tweets_data = open(dir_path+"tweets_data","a+")
		for new_tid in new_tweet_id:
			tweets_data.write(new_tid+'\n')
		tweets_data.close()
		print("Buffer file was updated. Goodbye.")


def sendMail(sender, password, smtpsrv, port, tls, receivers,title, url, summary):
	



	script_path = os.path.abspath(__file__)
	dir_path = script_path.replace("cve-notifier.py","")
	body = ""
	print("One new tweet detected.")
	for receiver in receivers:
		with open(dir_path+'template.html', 'r') as template:
			html_code = template.read()
			html_code = html_code.replace("Responsive HTML email templates",title)
			html_code = html_code.replace("body body body body", summary)
			body = html_code.replace("URL OF THE NEWS",url)
	    

		print("Sending email at {}...".format(receiver))
		try:
			smtpserver = smtplib.SMTP(smtpsrv,port)
			msg = MIMEMultipart()
			msg['Subject'] = 'CVE-Notifier - New Alert'
			msg['From'] = sender
			msg['To'] = receiver
			msg.attach(MIMEText(body, 'html'))
		except:
			print("Failed to send email.")
			exit()
		try:
			if tls == "yes":
				smtpserver.ehlo()
				smtpserver.starttls()
				smtpserver.login(sender, password)
				smtpserver.sendmail(sender, receiver, msg.as_string())
				print("Email was sent.\n")
			elif tls == "no":
				smtpserver.login(sender, password)
				smtpserver.sendmail(sender, receiver, msg.as_string())
				print("Email was sent.\n")
		except:
			print("An error occurred during authentication with the SMTP server. Check the configuration and try again.")
			exit()

def main():
	checkConfig(sender, receiver, password, smtpsrv, port, tls, consumer_key, consumer_secret, access_token_key, access_token_secret, keywords)
	
main()
