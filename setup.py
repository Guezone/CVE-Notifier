import sys, base64, time, os, smtplib,argparse, tweepy
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def mailTester(sender, passwd, smtpsrv, port, tls, receivers, consumer_key, consumer_secret, access_token_key, access_token_secret):
    script_path = os.path.abspath(__file__)
    dir_path = script_path.replace("setup.py","")
    body = ""
    receivers_email = receivers.split(";")
    with open(dir_path+'template.html', 'r') as template:
        html_code = template.read()

        html_code = html_code.replace("Responsive HTML email templates","CVE-Notifier - Test email.")
        html_code = html_code.replace("body body body body", "CVE-Notifier is now ready ! SMTP authentication successful. Mail sent successfully.")
        html_code = html_code.replace("See more details","Follow my on Github")
        body = html_code.replace("URL OF THE NEWS","https://github.com/Guezone")
        
    for receiver in receivers_email:
        try:
            print("\nPlease wait. A test message to {} will be sent to test your configuration.\n".format(receiver))
            smtpserver = smtplib.SMTP(smtpsrv,port)
            msg = MIMEMultipart()
            msg['Subject'] = 'CVE-Notifier - Test email.'
            msg['From'] = sender
            msg['To'] = receiver
            msg.attach(MIMEText(body, 'html'))
        except:
            print("Incorrect configuration. Exit")
            exit()
        try:
            if tls == "yes":
                smtpserver.ehlo()
                smtpserver.starttls()
                smtpserver.login(sender, passwd)
                smtpserver.sendmail(sender, receiver, msg.as_string())
            elif tls == "no":
                smtpserver.login(sender, passwd)
                smtpserver.sendmail(sender, receiver, msg.as_string())
            else:
                print("You must specify if you want to use TLS(-tls yes|no). Exit.")
                exit()      
        except:
            print("An error occurred during authentication with the SMTP server. Check the configuration and try again.")
            exit()
    if twitterApiTester(consumer_key, consumer_secret, access_token_key, access_token_secret) == True:
        buildTweetList(consumer_key, consumer_secret, access_token_key, access_token_secret)
        configBuilder(sender, passwd, smtpsrv, port, tls, receivers, consumer_key, consumer_secret, access_token_key, access_token_secret)
        time.sleep(0.3)
        print("CVE-Notifier is now ready. Execute cve-notifier.py now and automate it.")

def buildTweetList(consumer_key, consumer_secret, access_token_key, access_token_secret):
    script_path = os.path.abspath(__file__)
    data = ""
    dir_path = script_path.replace("setup.py","")
    tweetlist_data_file = open(dir_path+"tweets_data","w")
    print("\nCurrent tweetlist recording in progress...\n")
    auth = tweepy.OAuthHandler(consumer_key,consumer_secret)
    auth.set_access_token(access_token_key,access_token_secret)
    api = tweepy.API(auth)
    cve_tweets = api.user_timeline(screen_name="cvenew", tweet_mode="extended", count=200)
    for tweets in cve_tweets:
        data += str(tweets.id)
        data += '\n'
    tweetlist_data_file.write(data)
    tweetlist_data_file.close()
    print("Successful recording of tweets entries in the buffer file.\n")


def twitterApiTester(consumer_key, consumer_secret, access_token_key, access_token_secret):
    try:
        auth = tweepy.OAuthHandler(consumer_key,consumer_secret)
        auth.set_access_token(access_token_key,access_token_secret)
        api = tweepy.API(auth)
        print("Twitter API authentication successful.")
        return True
    except:
        print("Unable to identify you on the Twitter API. Check your tokens and retry.")
        exit()
def configBuilder(sender, passwd, smtpsrv, port, tls, receiver, consumer_key, consumer_secret, access_token_key, access_token_secret):
    script_path = os.path.abspath(__file__)
    dir_path = script_path.replace("setup.py","")
    enc_pass = (str(base64.b64encode(passwd.encode("UTF-8"))).replace("b'","")).replace("'","")
    enc_consumer_key = (str(base64.b64encode(consumer_key.encode("UTF-8"))).replace("b'","")).replace("'","")
    enc_consumer_secret = (str(base64.b64encode(consumer_secret.encode("UTF-8"))).replace("b'","")).replace("'","")
    enc_access_token_key = (str(base64.b64encode(access_token_key.encode("UTF-8"))).replace("b'","")).replace("'","")
    enc_access_token_secret = (str(base64.b64encode(access_token_secret.encode("UTF-8"))).replace("b'","")).replace("'","")
    conf = open(dir_path+"config.txt","w")
    key_choice = input("Do you want to be notified for all CVE news or add keywords ? (A/a -> All CVE) (K/k -> Keywords only) : ")
    if key_choice == "k" or key_choice == "K":
        keywords = input("Please enter the keywords you are interested in among CVE publications (ex: iOS;Microsoft;Palo) separated by ';'' :")
        keywords = keywords.replace(" ","")

        conf.write("sender(=)"+sender+"\n"+"password(=)"+enc_pass+"\n"+"smtpsrv(=)"+smtpsrv+"\n"+"port(=)"+str(port)+"\n"+"receiver(=)"+receiver+"\n"+"tls(=)"+tls+"\n"+"cons_key(=)"+enc_consumer_key+"\n"+"cons_secret(=)"+enc_consumer_secret+"\n"+"access_key(=)"+enc_access_token_key+"\n"+"access_secret(=)"+enc_access_token_secret+"\n"+"keywords(=)"+keywords)
        conf.close()
    elif key_choice == "a" or key_choice == "A":
        conf.write("sender(=)"+sender+"\n"+"password(=)"+enc_pass+"\n"+"smtpsrv(=)"+smtpsrv+"\n"+"port(=)"+str(port)+"\n"+"receiver(=)"+receiver+"\n"+"tls(=)"+tls+"\n"+"cons_key(=)"+enc_consumer_key+"\n"+"cons_secret(=)"+enc_consumer_secret+"\n"+"access_key(=)"+enc_access_token_key+"\n"+"access_secret(=)"+enc_access_token_secret)
        conf.close()
    else:
        print("Please choose if you want to use keywords or not... Exiting.")
        exit()
  


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-sender",nargs=1,required=True,metavar="email-addr",help="set sender email address")
    parser.add_argument("-p",nargs=1,required=True,metavar="your_password",help="set sender SMTP password")
    parser.add_argument("-server",nargs=1,required=True,metavar="smtp_server",help="set SMTP server name")
    parser.add_argument("-port",nargs=1,required=True,metavar="port",help="set SMTP port used by the server", type=int)
    parser.add_argument("-tls",nargs=1,required=True,metavar="yes|no",help="use TLS for SMTP authentication")
    parser.add_argument("-cons_key",nargs=1,required=True,metavar="consumer_key",help="set your consumer twitter API key")
    parser.add_argument("-cons_secret",nargs=1,required=True,metavar="consumer_secret",help="set your consumer twitter API secret")
    parser.add_argument("-access_key",nargs=1,required=True,metavar="access_token_key",help="set your access twitter API key")
    parser.add_argument("-access_secret",nargs=1,required=True,metavar="access_token_secret",help="set your access twitter API secret")
    parser.add_argument("-r",nargs=1,required=True,metavar="email-addr1;email-addr2",help="set receivers email address")
    args = parser.parse_args()
    sender = ''.join(args.sender)
    passwd = ''.join(args.p)
    server = ''.join(args.server)
    port = args.port[0]
    tls = ''.join(args.tls)
    consumer_key = ''.join(args.cons_key)
    consumer_secret = ''.join(args.cons_secret)
    access_token_key = ''.join(args.access_key)
    access_token_secret = ''.join(args.access_secret)
    receivers = ''.join(args.r)

    mailTester(sender, passwd, server, port, tls, receivers, consumer_key, consumer_secret, access_token_key, access_token_secret)
main()
